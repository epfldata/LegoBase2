
package ch.epfl.data
package legobase
package deep

import scalalib._
import pardis.ir._
import pardis.ir.pardisTypeImplicits._
import pardis.deep.scalalib._
trait QueriesOps extends Base { this: QueryComponent =>
  implicit class QueriesRep(self: Rep[Queries]) {

  }
  object Queries {
    def Q1(numRuns: Rep[Int]): Rep[Unit] = queriesQ1Object(numRuns)
    def Q2(numRuns: Rep[Int]): Rep[Unit] = queriesQ2Object(numRuns)
    def Q3(numRuns: Rep[Int]): Rep[Unit] = queriesQ3Object(numRuns)
    def Q4(numRuns: Rep[Int]): Rep[Unit] = queriesQ4Object(numRuns)
    def Q5(numRuns: Rep[Int]): Rep[Unit] = queriesQ5Object(numRuns)
    def Q6(numRuns: Rep[Int]): Rep[Unit] = queriesQ6Object(numRuns)
    def Q7(numRuns: Rep[Int]): Rep[Unit] = queriesQ7Object(numRuns)
    def Q8(numRuns: Rep[Int]): Rep[Unit] = queriesQ8Object(numRuns)
    def Q9(numRuns: Rep[Int]): Rep[Unit] = queriesQ9Object(numRuns)
    def Q10(numRuns: Rep[Int]): Rep[Unit] = queriesQ10Object(numRuns)
    def Q11(numRuns: Rep[Int]): Rep[Unit] = queriesQ11Object(numRuns)
    def Q12(numRuns: Rep[Int]): Rep[Unit] = queriesQ12Object(numRuns)
    def Q13(numRuns: Rep[Int]): Rep[Unit] = queriesQ13Object(numRuns)
    def Q14(numRuns: Rep[Int]): Rep[Unit] = queriesQ14Object(numRuns)
    def Q15(numRuns: Rep[Int]): Rep[Unit] = queriesQ15Object(numRuns)
    def Q16(numRuns: Rep[Int]): Rep[Unit] = queriesQ16Object(numRuns)
    def Q17(numRuns: Rep[Int]): Rep[Unit] = queriesQ17Object(numRuns)
    def Q18(numRuns: Rep[Int]): Rep[Unit] = queriesQ18Object(numRuns)
    def Q19(numRuns: Rep[Int]): Rep[Unit] = queriesQ19Object(numRuns)
    def Q20(numRuns: Rep[Int]): Rep[Unit] = queriesQ20Object(numRuns)
    def Q21(numRuns: Rep[Int]): Rep[Unit] = queriesQ21Object(numRuns)
    def Q22(numRuns: Rep[Int]): Rep[Unit] = queriesQ22Object(numRuns)
  }
  // constructors

  // case classes
  case class QueriesQ1Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q1", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ3Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q3", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ4Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q4", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ5Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q5", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ6Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q6", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ7Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q7", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ8Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q8", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ9Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q9", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ10Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q10", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ11Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q11", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ12Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q12", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ13Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q13", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ14Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q14", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ15Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q15", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ16Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q16", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ17Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q17", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ18Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q18", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ19Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q19", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ20Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q20", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ21Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q21", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ22Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q22", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  // method definitions
  def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ1Object(numRuns)
  def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ2Object(numRuns)
  def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ3Object(numRuns)
  def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ4Object(numRuns)
  def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ5Object(numRuns)
  def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ6Object(numRuns)
  def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ7Object(numRuns)
  def queriesQ8Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ8Object(numRuns)
  def queriesQ9Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ9Object(numRuns)
  def queriesQ10Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ10Object(numRuns)
  def queriesQ11Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ11Object(numRuns)
  def queriesQ12Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ12Object(numRuns)
  def queriesQ13Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ13Object(numRuns)
  def queriesQ14Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ14Object(numRuns)
  def queriesQ15Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ15Object(numRuns)
  def queriesQ16Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ16Object(numRuns)
  def queriesQ17Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ17Object(numRuns)
  def queriesQ18Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ18Object(numRuns)
  def queriesQ19Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ19Object(numRuns)
  def queriesQ20Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ20Object(numRuns)
  def queriesQ21Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ21Object(numRuns)
  def queriesQ22Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ22Object(numRuns)
  type Queries = ch.epfl.data.legobase.Queries
  case object QueriesType extends TypeRep[Queries] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = QueriesType
    val name = "Queries"
    val typeArguments = Nil

    val typeTag = scala.reflect.runtime.universe.typeTag[Queries]
  }
  implicit val typeQueries = QueriesType
}
trait QueriesImplicits { this: QueriesComponent =>
  // Add implicit conversions here!
}
trait QueriesImplementations { self: DeepDSL =>
  override def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1998-08-11"));
        val lineitemScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$less$eq(constantDate))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, ch.epfl.data.legobase.queryengine.GroupByClass]] = __newAggOp(lineitemScan, unit(9))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => __newGroupByClass(x.L_RETURNFLAG, x.L_LINESTATUS))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_DISCOUNT.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_QUANTITY.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$times(unit(1.0).$plus(t.L_TAX)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val mapOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.MapOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newMapOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(6), kv.aggs.apply(unit(1)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(7), kv.aggs.apply(unit(2)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => kv.aggs.update(unit(8), kv.aggs.apply(unit(0)).$div(kv.aggs.apply(unit(5)))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newSortOp(mapOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => {
          var res: this.Var[Int] = __newVar(Character2char(kv1.key.L_RETURNFLAG).$minus(Character2char(kv2.key.L_RETURNFLAG)));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, Character2char(kv1.key.L_LINESTATUS).$minus(Character2char(kv2.key.L_LINESTATUS))), unit(()));
          readVar(res)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.GroupByClass]]) => printf(unit("%c|%c|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.0f\n"), kv.key.L_RETURNFLAG, kv.key.L_LINESTATUS, kv.aggs.apply(unit(1)), kv.aggs.apply(unit(2)), kv.aggs.apply(unit(3)), kv.aggs.apply(unit(4)), kv.aggs.apply(unit(6)), kv.aggs.apply(unit(7)), kv.aggs.apply(unit(8)), kv.aggs.apply(unit(5))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = Loader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val africa: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("AFRICA"));
        val tin: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("TIN"));
        val partsuppScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val supplierScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, Int]] = __newHashJoinOp(supplierScan, partsuppScan)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => infix_$eq$eq(x.S_SUPPKEY, y.PS_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_SUPPKEY)));
        val nationScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], Int]] = __newHashJoinOp(nationScan, jo1)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val partScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => infix_$eq$eq(x.P_SIZE, unit(43)).$amp$amp(x.P_TYPE.endsWith(tin)))));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]], Int]] = __newHashJoinOp(partScan, jo2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]) => infix_$eq$eq(x.P_PARTKEY, y.selectDynamic[Int](unit("PS_PARTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))));
        val regionScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_NAME.$eq$eq$eq(africa))));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]], Int]] = __newHashJoinOp(regionScan, jo3)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))));
        val wo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.WindowOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]], Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]] = __newWindowOp(jo4)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]) => x.selectDynamic[Int](unit("P_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.ArrayBuffer[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => x.minBy[Double](__lambda(((y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]) => y.selectDynamic[Double](unit("PS_SUPPLYCOST"))))))));
        val so: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]] = __newSortOp(wo)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]], y: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$less(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(1), __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$greater(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(-1), {
          var res: this.Var[Int] = __newVar(x.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")).compare(y.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME"))));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), {
            __assign(res, x.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).compare(y.wnd.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME"))));
            __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, x.wnd.selectDynamic[Int](unit("P_PARTKEY")).$minus(y.wnd.selectDynamic[Int](unit("P_PARTKEY")))), unit(()))
          }, unit(()));
          readVar(res)
        })))));
        var j: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]] = __newPrintOp(so)(__lambda(((e: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]]]) => {
          val kv: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]]] = e.wnd;
          printf(unit("%.2f|%s|%s|%d|%s|%s|%s|%s\n"), kv.selectDynamic[Double](unit("S_ACCTBAL")), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")).string, kv.selectDynamic[Int](unit("P_PARTKEY")), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_MFGR")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_PHONE")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_COMMENT")).string);
          __assign(j, readVar(j).$plus(unit(1)))
        })), __lambda((() => readVar(j).$less(unit(100)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1995-03-04"));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_MKTSEGMENT.$eq$eq$eq(GenericEngine.parseString(unit("HOUSEHOLD"))))));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate))));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater(constantDate))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(scanCustomer, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.Q3GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => __newQ3GRPRecord(x.selectDynamic[Int](unit("L_ORDERKEY")), x.selectDynamic[Long](unit("O_ORDERDATE")), x.selectDynamic[Int](unit("O_SHIPPRIORITY"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]) => {
          val agg1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val agg2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(agg1.$less(agg2), unit(1), __ifThenElse(agg1.$greater(agg2), unit(-1), {
            val k1: this.Rep[Long] = kv1.key.O_ORDERDATE;
            val k2: this.Rep[Long] = kv2.key.O_ORDERDATE;
            __ifThenElse(k1.$less(k2), unit(-1), __ifThenElse(k1.$greater(k2), unit(1), unit(0)))
          }))
        })));
        var i: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q3GRPRecord]]) => {
          printf(unit("%d|%.4f|%s|%d\n"), kv.key.L_ORDERKEY, kv.aggs.apply(unit(0)), GenericEngine.dateToString(kv.key.O_ORDERDATE), kv.key.O_SHIPPRIORITY);
          __assign(i, readVar(i).$plus(unit(1)))
        })), __lambda((() => readVar(i).$less(unit(10)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1993-11-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1993-08-01"));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate1).$amp$amp(x.O_ORDERDATE.$greater$eq(constantDate2)))));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_COMMITDATE.$less(x.L_RECEIPTDATE))));
        val hj: this.Rep[ch.epfl.data.legobase.queryengine.volcano.LeftHashSemiJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newLeftHashSemiJoinOp(scanOrders, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.LBString]] = __newAggOp(hj, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERPRIORITY)))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => {
          val k1: this.Rep[ch.epfl.data.legobase.LBString] = kv1.key;
          val k2: this.Rep[ch.epfl.data.legobase.LBString] = kv2.key;
          k1.diff(k2)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => printf(unit("%s|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val regionTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = Loader.loadRegion();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1997-01-01"));
        val scanRegion: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_NAME.$eq$eq$eq(GenericEngine.parseString(unit("ASIA"))))));
        val scanNation: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, Int]] = __newHashJoinOp(scanRegion, scanNation)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => infix_$eq$eq(x.R_REGIONKEY, y.N_REGIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_REGIONKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(jo1, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]]) => x.selectDynamic[Int](unit("N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, Int]] = __newHashJoinOp(jo2, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.C_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_NATIONKEY)));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(jo3, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("C_CUSTKEY")), y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]] = __newSelectOp(__newHashJoinOp(jo4, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), x.selectDynamic[Int](unit("L_SUPPKEY"))))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.LBString]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), unit(0))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => printf(unit("%s|%.4f\n"), kv.key.string, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1997-01-01"));
        val lineitemScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2)).$amp$amp(x.L_DISCOUNT.$greater$eq(unit(0.08))).$amp$amp(x.L_DISCOUNT.$less$eq(unit(0.1))).$amp$amp(x.L_QUANTITY.$less(unit(24))))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, String]] = __newAggOp(lineitemScan, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(t.L_DISCOUNT).$plus(currAgg))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => printf(unit("%.4f\n"), kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val usa: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("UNITED STATES"));
        val indonesia: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("INDONESIA"));
        val scanNation1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val scanNation2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.NestedLoopsJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newNestedLoopsJoinOp(scanNation1, scanNation2, unit("N1_"), unit("N2_"))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NAME.$eq$eq$eq(usa).$amp$amp(y.N_NAME.$eq$eq$eq(indonesia)).$bar$bar(x.N_NAME.$eq$eq$eq(indonesia).$amp$amp(y.N_NAME.$eq$eq$eq(usa))))));
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(jo1, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N1_N_NATIONKEY")), y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]]) => x.selectDynamic[Int](unit("N1_N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(GenericEngine.parseDate(unit("1995-01-01"))).$amp$amp(x.L_SHIPDATE.$less$eq(GenericEngine.parseDate(unit("1996-12-31")))))));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo2, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SUPPKEY)));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(jo3, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], Int]] = __newHashJoinOp(scanCustomer, jo4)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))).$amp$amp(infix_$eq$eq(x.C_NATIONKEY, y.selectDynamic[Int](unit("N2_N_NATIONKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))));
        val gb: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], ch.epfl.data.legobase.queryengine.Q7GRPRecord]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]]) => __newQ7GRPRecord(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N1_N_NAME")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N2_N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Long](unit("L_SHIPDATE"))).toLong))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val so: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]] = __newSortOp(gb)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.legobase.queryengine.Q7GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.legobase.queryengine.Q7GRPRecord] = kv2.key;
          val r1: this.Rep[Int] = k1.SUPP_NATION.diff(k2.SUPP_NATION);
          __ifThenElse(infix_$bang$eq(r1, unit(0)), r1, {
            val r2: this.Rep[Int] = k1.CUST_NATION.diff(k2.CUST_NATION);
            __ifThenElse(infix_$bang$eq(r2, unit(0)), r2, __ifThenElse(k1.L_YEAR.$less(k2.L_YEAR), unit(-1), __ifThenElse(k1.L_YEAR.$greater(k2.L_YEAR), unit(1), unit(0))))
          })
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]] = __newPrintOp(so)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q7GRPRecord]]) => printf(unit("%s|%s|%d|%.4f\n"), kv.key.SUPP_NATION.string, kv.key.CUST_NATION.string, kv.key.L_YEAR, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ8Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = Loader.loadRegion();
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1996-12-31"));
        val asia: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("ASIA"));
        val indonesia: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("INDONESIA"));
        val medAnonNick: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MEDIUM ANODIZED NICKEL"));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanPart: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_TYPE.$eq$eq$eq(medAnonNick))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(scanPart, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_PARTKEY)));
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less$eq(constantDate2)))));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(jo1, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, Int]] = __newHashJoinOp(jo2, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_CUSTKEY")), y.C_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)));
        val scanNation1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], Int]] = __newHashJoinOp(scanNation1, jo3)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))));
        val scanRegion: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_NAME.$eq$eq$eq(asia))));
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], Int]] = __newHashJoinOp(scanRegion, jo4)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))));
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo6: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]], Int]] = __newHashJoinOp(scanSupplier, jo5)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))));
        val scanNation2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val jo7: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]], Int]] = __newHashJoinOp(scanNation2, jo6, unit("REC1_"), unit("REC2_"))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]], Int]] = __newAggOp(jo7, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]]]) => GenericEngine.dateToYear(x.selectDynamic[Long](unit("REC2_O_ORDERDATE"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("REC2_L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("REC2_L_DISCOUNT"))))))), __lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.REGIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]]]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("REC1_N_NAME")).$eq$eq$eq(indonesia), currAgg.$plus(t.selectDynamic[Double](unit("REC2_L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("REC2_L_DISCOUNT"))))), currAgg))));
        val mapOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.MapOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]] = __newMapOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => x.aggs.update(unit(2), x.aggs.apply(unit(1)).$div(x.aggs.apply(unit(0)))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]] = __newSortOp(mapOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => __ifThenElse(x.key.$less(y.key), unit(-1), __ifThenElse(x.key.$greater(y.key), unit(1), unit(0))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => printf(unit("%d|%.5f\n"), kv.key, kv.aggs.apply(unit(2))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ9Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val ghost: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("ghost"));
        val soNation: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val soSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val soLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val soPart: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_NAME.containsSlice(ghost))));
        val soPartsupp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val soOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val hj1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(soNation, soSupplier)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val hj2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(hj1, soLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SUPPKEY)));
        val hj3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], Int]] = __newHashJoinOp(soPart, hj2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => infix_$eq$eq(x.P_PARTKEY, y.selectDynamic[Int](unit("L_PARTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_PARTKEY")))));
        val hj4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], Int]] = __newHashJoinOp(soPartsupp, hj3)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]) => infix_$eq$eq(x.PS_PARTKEY, y.selectDynamic[Int](unit("L_PARTKEY"))).$amp$amp(infix_$eq$eq(x.PS_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]) => x.selectDynamic[Int](unit("L_PARTKEY")))));
        val hj5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(hj4, soOrders)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.Q9GRPRecord]] = __newAggOp(hj5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => __newQ9GRPRecord(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Long](unit("O_ORDERDATE"))).toLong))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))).$minus(unit(1.0).$times(t.selectDynamic[Double](unit("PS_SUPPLYCOST"))).$times(t.selectDynamic[Double](unit("L_QUANTITY")))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q9GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q9GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q9GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.legobase.queryengine.Q9GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.legobase.queryengine.Q9GRPRecord] = kv2.key;
          val r: this.Rep[Int] = k1.NATION.diff(k2.NATION);
          __ifThenElse(infix_$eq$eq(r, unit(0)), __ifThenElse(k1.O_YEAR.$less(k2.O_YEAR), unit(1), __ifThenElse(k1.O_YEAR.$greater(k2.O_YEAR), unit(-1), unit(0))), r)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q9GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q9GRPRecord]]) => printf(unit("%s|%d|%.4f\n"), kv.key.NATION.string, kv.key.O_YEAR, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ10Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1994-11-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1995-02-01"));
        val so1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val so2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val hj1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, Int]] = __newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => infix_$eq$eq(x.O_CUSTKEY, y.C_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)));
        val so3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newScanOp(nationTable);
        val hj2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], Int]] = __newHashJoinOp(so3, hj1)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))));
        val so4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.L_RETURNFLAG, unit('R')))));
        val hj3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(hj2, so4)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.Q10GRPRecord]] = __newAggOp(hj3, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => __newQ10GRPRecord(x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("C_NAME")), x.selectDynamic[Double](unit("C_ACCTBAL")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("C_PHONE")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("N_NAME")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("C_ADDRESS")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("C_COMMENT"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(infix_asInstanceOf[Double](t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT")))))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q10GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q10GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q10GRPRecord]]) => {
          val k1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val k2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(k1.$less(k2), unit(1), __ifThenElse(k1.$greater(k2), unit(-1), unit(0)))
        })));
        var j: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q10GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q10GRPRecord]]) => {
          printf(unit("%d|%s|%.4f|%.2f|%s|%s|%s|%s\n"), kv.key.C_CUSTKEY, kv.key.C_NAME.string, kv.aggs.apply(unit(0)), kv.key.C_ACCTBAL, kv.key.N_NAME.string, kv.key.C_ADDRESS.string, kv.key.C_PHONE.string, kv.key.C_COMMENT.string);
          __assign(j, readVar(j).$plus(unit(1)))
        })), __lambda((() => readVar(j).$less(unit(20)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ11Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      GenericEngine.runQuery[Unit]({
        val uk: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("UNITED KINGDOM"));
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanNation: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NAME.$eq$eq$eq(uk))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(scanNation, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val scanPartsupp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, Int]] = __newHashJoinOp(jo1, scanPartsupp)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.PS_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_SUPPKEY)));
        val wo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.WindowOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], Int, Double]] = __newWindowOp(jo2)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.ArrayBuffer[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]]) => x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => cnt.$plus(e.selectDynamic[Double](unit("PS_SUPPLYCOST")).$times(e.selectDynamic[Int](unit("PS_AVAILQTY"))))))))));
        wo.open();
        val vo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ViewOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]] = __newViewOp(wo);
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double], String]] = __newAggOp(vo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]], currAgg: this.Rep[Double]) => currAgg.$plus(t.wnd))));
        val total: this.Rep[Double] = __newSubquerySingleResult(aggOp).getResult.aggs.apply(unit(0)).$times(unit(1.0E-4));
        vo.reset();
        val so: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]] = __newSelectOp(vo)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]) => x.wnd.$greater(total))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]] = __newSortOp(so)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]], y: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]) => __ifThenElse(x.wnd.$greater(y.wnd), unit(-1), __ifThenElse(x.wnd.$less(y.wnd), unit(1), unit(0))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]) => printf(unit("%d|%.2f\n"), kv.key, kv.wnd))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ12Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val mail: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MAIL"));
        val ship: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("SHIP"));
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1994-01-01"));
        val so1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val so2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_RECEIPTDATE.$less(constantDate).$amp$amp(x.L_COMMITDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(x.L_COMMITDATE)).$amp$amp(x.L_COMMITDATE.$less(x.L_RECEIPTDATE)).$amp$amp(x.L_RECEIPTDATE.$greater$eq(constantDate2)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(mail).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(ship))))));
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val URGENT: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("1-URGENT"));
        val HIGH: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("2-HIGH"));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.LBString]] = __newAggOp(jo, unit(2))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("L_SHIPMODE")))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("O_ORDERPRIORITY")).$eq$eq$eq(URGENT).$bar$bar(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("O_ORDERPRIORITY")).$eq$eq$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))), __lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("O_ORDERPRIORITY")).$eq$bang$eq(URGENT).$amp$amp(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("O_ORDERPRIORITY")).$eq$bang$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => x.key.diff(y.key))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => printf(unit("%s|%.0f|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0)), kv.aggs.apply(unit(1))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ13Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val unusual: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("unusual"));
        val packages: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("packages"));
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => {
          val idxu: this.Rep[Int] = x.O_COMMENT.indexOfSlice(unusual, unit(0));
          val idxp: this.Rep[Int] = x.O_COMMENT.indexOfSlice(packages, idxu);
          infix_$bang$eq(idxu, unit(-1)).$amp$amp(infix_$bang$eq(idxp, unit(-1))).unary_$bang
        })));
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.LeftOuterJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newLeftOuterJoinOp(scanCustomer, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val aggOp1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], Int]] = __newAggOp(jo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("C_CUSTKEY")))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], currAgg: this.Rep[Double]) => __ifThenElse(infix_$bang$eq(t.selectDynamic[Int](unit("O_ORDERKEY")), unit(0.0)), currAgg.$plus(unit(1)), currAgg))));
        val aggOp2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int], Double]] = __newAggOp(aggOp1, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => x.aggs.apply(unit(0)))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[Double]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Double]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Double]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), __ifThenElse(x.key.$less(y.key), unit(1), __ifThenElse(x.key.$greater(y.key), unit(-1), unit(0))))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[Double]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Double]]) => printf(unit("%.0f|%.0f\n"), kv.key, kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      }))))
    }
  }
  override def queriesQ14Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      GenericEngine.runQuery[Unit]({
        val promo: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("PROMO"));
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1994-04-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1994-03-01"));
        val so1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newScanOp(partTable);
        val so2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate2).$amp$amp(x.L_SHIPDATE.$less(constantDate)))));
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_PARTKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], String]] = __newAggOp(jo, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_TYPE")).startsWith(promo), currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))), currAgg))), __lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val mapOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.MapOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newMapOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => kv.aggs.update(unit(2), kv.aggs.apply(unit(0)).$times(unit(100)).$div(kv.aggs.apply(unit(1)))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newPrintOp(mapOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => printf(unit("%.4f\n"), kv.aggs.apply(unit(2))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ15Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Long] = GenericEngine.parseDate(unit("1993-09-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1993-12-01"));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate).$amp$amp(x.L_SHIPDATE.$less(constantDate2)))));
        val aggOp1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newAggOp(scanLineitem, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SUPPKEY)))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT))))));
        aggOp1.open();
        val vo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ViewOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]] = __newViewOp(aggOp1);
        val aggOp2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int], String]] = __newAggOp(vo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => unit("MAXREVENUE"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]], currAgg: this.Rep[Double]) => __ifThenElse(currAgg.$less(t.aggs.apply(unit(0))), t.aggs.apply(unit(0)), currAgg))));
        aggOp2.open();
        val maxRevenue: this.Rep[Double] = __newSubquerySingleResult(aggOp2).getResult.aggs.apply(unit(0));
        vo.reset();
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.AGGRecord[Int], Int]] = __newHashJoinOp(scanSupplier, vo)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => infix_$eq$eq(x.S_SUPPKEY, y.key).$amp$amp(infix_$eq$eq(y.aggs.apply(unit(0)), maxRevenue)))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => x.key)));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.AGGRecord[Int]]]] = __newPrintOp(jo)(__lambda(((kv: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, ch.epfl.data.legobase.queryengine.AGGRecord[Int]]]) => printf(unit("%d|%s|%s|%s|%.4f\n"), kv.selectDynamic[Nothing](unit("S_SUPPKEY")), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_PHONE")).string, kv.selectDynamic[Array[Double]](unit("aggs")).apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ16Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      GenericEngine.runQuery[Unit]({
        val str1: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Customer"));
        val str2: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Complaints"));
        val brand21: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Brand#21"));
        val promoPlated: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("PROMO PLATED"));
        val partScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_BRAND.startsWith(brand21).unary_$bang.$amp$amp(x.P_TYPE.startsWith(promoPlated).unary_$bang).$amp$amp(infix_$eq$eq(x.P_SIZE, unit(23)).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(3))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(33))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(29))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(40))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(27))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(22))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(4)))))));
        val partsuppScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, Int]] = __newHashJoinOp(partScan, partsuppScan)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => infix_$eq$eq(x.P_PARTKEY, y.PS_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_PARTKEY)));
        val supplierScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newSelectOp(__newScanOp(supplierTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => {
          val idxu: this.Rep[Int] = x.S_COMMENT.indexOfSlice(str1, unit(0));
          val idxp: this.Rep[Int] = x.S_COMMENT.indexOfSlice(str2, idxu);
          infix_$bang$eq(idxu, unit(-1)).$amp$amp(infix_$bang$eq(idxp, unit(-1)))
        })));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinAnti[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinAnti(jo1, supplierScan)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("PS_SUPPKEY")), y.S_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.Q16GRPRecord1]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => __newQ16GRPRecord1(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_BRAND")), x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_TYPE")), x.selectDynamic[Int](unit("P_SIZE")), x.selectDynamic[Int](unit("PS_SUPPKEY"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]], currAgg: this.Rep[Double]) => currAgg)));
        val aggOp2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord1], ch.epfl.data.legobase.queryengine.Q16GRPRecord2]] = __newAggOp(aggOp, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord1]]) => __newQ16GRPRecord2(x.key.P_BRAND, x.key.P_TYPE, x.key.P_SIZE))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord1]], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord2]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord2]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord2]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), {
          var res: this.Var[Int] = __newVar(x.key.P_BRAND.diff(y.key.P_BRAND));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), {
            __assign(res, x.key.P_TYPE.diff(y.key.P_TYPE));
            __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, x.key.P_SIZE.$minus(y.key.P_SIZE)), unit(()))
          }, unit(()));
          readVar(res)
        })))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord2]]] = __newPrintOp(sortOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q16GRPRecord2]]) => printf(unit("%s|%s|%d|%.0f\n"), x.key.P_BRAND.string, x.key.P_TYPE.string, x.key.P_SIZE, x.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ17Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      GenericEngine.runQuery[Unit]({
        val medbag: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MED BAG"));
        val brand15: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Brand#15"));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanPart: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_CONTAINER.$eq$eq$eq(medbag).$amp$amp(x.P_BRAND.$eq$eq$eq(brand15)))));
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(scanPart, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_PARTKEY)));
        val wo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.WindowOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], Int, Double]] = __newWindowOp(jo)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.ArrayBuffer[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]) => {
          val sum: this.Rep[Double] = x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => cnt.$plus(e.selectDynamic[Double](unit("L_QUANTITY"))))));
          val count: this.Rep[Int] = x.size;
          val avg: this.Rep[Double] = unit(0.2).$times(sum.$div(count));
          x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => __ifThenElse(e.selectDynamic[Double](unit("L_QUANTITY")).$less(avg), cnt.$plus(e.selectDynamic[Double](unit("L_EXTENDEDPRICE"))), cnt)))).$div(unit(7.0))
        })));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double], String]] = __newAggOp(wo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.WindowRecord[Int, Double]], currAgg: this.Rep[Double]) => currAgg.$plus(t.wnd))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => printf(unit("%.6f\n"), kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ18Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      GenericEngine.runQuery[Unit]({
        val scanOrders: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val scanCustomer: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanLineitem1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val aggOp1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]] = __newSelectOp(__newAggOp(scanLineitem1, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(t.L_QUANTITY)))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => x.aggs.apply(unit(0)).$greater(unit(300)))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinOp(aggOp1, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(y.O_ORDERKEY, x.key))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[Int]]) => x.key)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, Int]] = __newHashJoinOp(jo1, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_CUSTKEY")), y.C_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)));
        val aggOp2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], ch.epfl.data.legobase.queryengine.Q18GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]]) => __newQ18GRPRecord(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("C_NAME")), x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[Int](unit("O_ORDERKEY")), x.selectDynamic[Long](unit("O_ORDERDATE")), x.selectDynamic[Double](unit("O_TOTALPRICE"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[Int], ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Array[Double]](unit("aggs")).apply(unit(0))))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q18GRPRecord]]] = __newSortOp(aggOp2)(__lambda(((kv1: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q18GRPRecord]], kv2: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q18GRPRecord]]) => {
          val k1: this.Rep[Double] = kv1.key.O_TOTALPRICE;
          val k2: this.Rep[Double] = kv2.key.O_TOTALPRICE;
          __ifThenElse(k1.$less(k2), unit(1), __ifThenElse(k1.$greater(k2), unit(-1), {
            val d1: this.Rep[Long] = kv1.key.O_ORDERDATE;
            val d2: this.Rep[Long] = kv2.key.O_ORDERDATE;
            __ifThenElse(d1.$less(d2), unit(-1), __ifThenElse(d1.$greater(d2), unit(1), unit(0)))
          }))
        })));
        var j: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q18GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q18GRPRecord]]) => {
          printf(unit("%s|%d|%d|%s|%.2f|%.2f\n"), kv.key.C_NAME.string, kv.key.C_CUSTKEY, kv.key.O_ORDERKEY, GenericEngine.dateToString(kv.key.O_ORDERDATE), kv.key.O_TOTALPRICE, kv.aggs.apply(unit(0)));
          __assign(j, readVar(j).$plus(unit(1)))
        })), __lambda((() => readVar(j).$less(unit(100)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ19Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      GenericEngine.runQuery[Unit]({
        val Brand31: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Brand#31"));
        val Brand43: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("Brand#43"));
        val SMBOX: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("SM BOX"));
        val SMCASE: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("SM CASE"));
        val SMPACK: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("SM PACK"));
        val SMPKG: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("SM PKG"));
        val MEDBAG: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MED BAG"));
        val MEDBOX: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MED BOX"));
        val MEDPACK: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MED PACK"));
        val MEDPKG: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MED PKG"));
        val LGBOX: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("LG BOX"));
        val LGCASE: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("LG CASE"));
        val LGPACK: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("LG PACK"));
        val LGPKG: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("LG PKG"));
        val DELIVERINPERSON: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("DELIVER IN PERSON"));
        val AIR: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("AIR"));
        val AIRREG: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("AIRREG"));
        val so1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_SIZE.$greater$eq(unit(1)).$amp$amp(x.P_SIZE.$less$eq(unit(5)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand31)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(SMBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(10)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(MEDBAG).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDBOX)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(15)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(LGBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPKG)))))));
        val so2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_QUANTITY.$less$eq(unit(36)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(26))).$bar$bar(x.L_QUANTITY.$less$eq(unit(25)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(15)))).$bar$bar(x.L_QUANTITY.$less$eq(unit(14)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(4)))).$amp$amp(x.L_SHIPINSTRUCT.$eq$eq$eq(DELIVERINPERSON)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(AIR).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(AIRREG))))));
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]] = __newSelectOp(__newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_BRAND")).$eq$eq$eq(Brand31).$amp$amp(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(SMBOX).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(SMCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(SMPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(SMPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(4))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(14))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(5))).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(MEDBAG).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(MEDBOX)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(MEDPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(MEDPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(15))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(25))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(10)))).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(LGBOX).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(LGCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(LGPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.legobase.LBString](unit("P_CONTAINER")).$eq$eq$eq(LGPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(26))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(36))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(15)))))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], String]] = __newAggOp(jo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => printf(unit("%.4f\n"), kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ20Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = Loader.loadPart();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val partsuppTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = Loader.loadPartsupp();
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Long] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Long] = GenericEngine.parseDate(unit("1997-01-01"));
        val jordan: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("JORDAN"));
        val azure: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("azure"));
        val scanPart: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_NAME.startsWith(azure))));
        val scanPartsupp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord, Int]] = __newHashJoinOp(scanPart, scanPartsupp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => infix_$eq$eq(x.P_PARTKEY, y.PS_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]) => x.PS_PARTKEY)));
        val scanLineitem: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2)))));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("PS_PARTKEY")), y.L_PARTKEY).$amp$amp(infix_$eq$eq(x.selectDynamic[Int](unit("PS_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_PARTKEY)));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.Q20GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => __newQ20GRPRecord(x.selectDynamic[Int](unit("PS_PARTKEY")), x.selectDynamic[Int](unit("PS_SUPPKEY")), x.selectDynamic[Int](unit("PS_AVAILQTY"))))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.PARTRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.PARTSUPPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_QUANTITY"))))));
        val selOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord]]] = __newSelectOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord]]) => x.key.PS_AVAILQTY.$greater(unit(0.5).$times(x.aggs.apply(unit(0)))))));
        val scanSupplier: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(aggOp, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.key.PS_SUPPKEY, y.S_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord]]) => x.key.PS_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_SUPPKEY)));
        val scanNation: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NAME.$eq$eq$eq(jordan))));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], Int]] = __newHashJoinOp(scanNation, jo3)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]]] = __newSortOp(jo4)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).diff(y.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME"))))));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.queryengine.Q20GRPRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]]) => printf(unit("%s|%s\n"), kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_ADDRESS")).string))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ21Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = Loader.loadLineitem();
      val supplierTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = Loader.loadSupplier();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      val nationTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = Loader.loadNation();
      GenericEngine.runQuery[Unit]({
        val morocco: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("MOROCCO"));
        val lineitemScan1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_RECEIPTDATE.$greater(x.L_COMMITDATE))));
        val lineitemScan2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val lineitemScan3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_RECEIPTDATE.$greater(x.L_COMMITDATE))));
        val supplierScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val nationScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NAME.$eq$eq$eq(morocco))));
        val ordersScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.O_ORDERSTATUS, unit('F')))));
        val jo1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord, Int]] = __newHashJoinOp(nationScan, supplierScan)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val jo2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, lineitemScan1)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_SUPPKEY)));
        val jo3: this.Rep[ch.epfl.data.legobase.queryengine.volcano.LeftHashSemiJoinOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newLeftHashSemiJoinOp(jo2, lineitemScan2)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.L_ORDERKEY).$amp$amp(infix_$bang$eq(x.selectDynamic[Int](unit("L_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val jo4: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinAnti[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord, Int]] = __newHashJoinAnti(jo3, lineitemScan3)(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.L_ORDERKEY).$amp$amp(infix_$bang$eq(x.selectDynamic[Int](unit("L_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]) => x.L_ORDERKEY)));
        val jo5: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord], Int]] = __newHashJoinOp(ordersScan, jo4)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord], y: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => infix_$eq$eq(x.O_ORDERKEY, y.selectDynamic[Int](unit("L_ORDERKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))));
        val aggOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]], ch.epfl.data.legobase.LBString]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]]) => x.selectDynamic[ch.epfl.data.legobase.LBString](unit("S_NAME")))))(__lambda(((t: this.Rep[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.legobase.queryengine.TPCHRelations.NATIONRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.SUPPLIERRecord], ch.epfl.data.legobase.queryengine.TPCHRelations.LINEITEMRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => {
          val a1: this.Rep[Double] = x.aggs.apply(unit(0));
          val a2: this.Rep[Double] = y.aggs.apply(unit(0));
          __ifThenElse(a1.$less(a2), unit(1), __ifThenElse(a1.$greater(a2), unit(-1), x.key.diff(y.key)))
        })));
        var i: this.Var[Int] = __newVar(unit(0));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.legobase.LBString]]) => {
          printf(unit("%s|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0)), __lambda((() => unit(true))));
          __assign(i, readVar(i).$plus(unit(1)))
        })), __lambda((() => readVar(i).$less(unit(100)))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
  override def queriesQ22Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val customerTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = Loader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = Loader.loadOrders();
      GenericEngine.runQuery[Unit]({
        val v23: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("23"));
        val v29: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("29"));
        val v22: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("22"));
        val v20: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("20"));
        val v24: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("24"));
        val v26: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("26"));
        val v25: this.Rep[ch.epfl.data.legobase.LBString] = GenericEngine.parseString(unit("25"));
        val customerScan1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_ACCTBAL.$greater(unit(0.0)).$amp$amp(x.C_PHONE.startsWith(v23).$bar$bar(x.C_PHONE.startsWith(v29).$bar$bar(x.C_PHONE.startsWith(v22).$bar$bar(x.C_PHONE.startsWith(v20).$bar$bar(x.C_PHONE.startsWith(v24).$bar$bar(x.C_PHONE.startsWith(v26).$bar$bar(x.C_PHONE.startsWith(v25)))))))))));
        val aggOp1: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, String]] = __newAggOp(customerScan1, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => unit("AVG_C_ACCTBAL"))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], currAgg: this.Rep[Double]) => t.C_ACCTBAL.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val mapOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.MapOp[ch.epfl.data.legobase.queryengine.AGGRecord[String]]] = __newMapOp(aggOp1)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[String]]) => kv.aggs.update(unit(2), kv.aggs.apply(unit(0)).$div(kv.aggs.apply(unit(1)))))));
        mapOp.open();
        val nestedAVG: this.Rep[Double] = __newSubquerySingleResult(mapOp).getResult.aggs.apply(unit(2));
        val customerScan2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SelectOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_ACCTBAL.$greater(nestedAVG).$amp$amp(x.C_PHONE.startsWith(v23).$bar$bar(x.C_PHONE.startsWith(v29).$bar$bar(x.C_PHONE.startsWith(v22).$bar$bar(x.C_PHONE.startsWith(v20).$bar$bar(x.C_PHONE.startsWith(v24).$bar$bar(x.C_PHONE.startsWith(v26).$bar$bar(x.C_PHONE.startsWith(v25)))))))))));
        val ordersScan: this.Rep[ch.epfl.data.legobase.queryengine.volcano.ScanOp[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]] = __newScanOp(ordersTable);
        val jo: this.Rep[ch.epfl.data.legobase.queryengine.volcano.HashJoinAnti[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord, Int]] = __newHashJoinAnti(customerScan2, ordersScan)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], y: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.ORDERSRecord]) => x.O_CUSTKEY)));
        val aggOp2: this.Rep[ch.epfl.data.legobase.queryengine.volcano.AggOp[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord, ch.epfl.data.pardis.shallow.OptimalString]] = __newAggOp(jo, unit(2))(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord]) => x.C_PHONE.slice(unit(0), unit(2)))))(__lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], currAgg: this.Rep[Double]) => t.C_ACCTBAL.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.legobase.queryengine.TPCHRelations.CUSTOMERRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.legobase.queryengine.volcano.SortOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.pardis.shallow.OptimalString]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.pardis.shallow.OptimalString]]) => {
          var res: this.Var[Int] = __newVar(x.key.apply(unit(0)).$minus(y.key.apply(unit(0))));
          __ifThenElse(infix_$eq$eq(readVar(res), unit(0)), __assign(res, x.key.apply(unit(1)).$minus(y.key.apply(unit(1)))), unit(()));
          readVar(res)
        })));
        val po: this.Rep[ch.epfl.data.legobase.queryengine.volcano.PrintOp[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.legobase.queryengine.AGGRecord[ch.epfl.data.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f|%.2f\n"), kv.key.string, kv.aggs.apply(unit(1)), kv.aggs.apply(unit(0))))), __lambda((() => unit(true))));
        po.open();
        po.next();
        printf(unit("(%d rows)\n"), po.numRows);
        unit(())
      })
    }
  }
}
trait QueriesComponent extends QueriesOps with QueriesImplicits { self: QueryComponent => }
trait QueryComponent extends QueriesComponent with AGGRecordComponent with WindowRecordComponent with CharacterComponent with DoubleComponent with IntComponent with LongComponent with ArrayComponent with LINEITEMRecordComponent with K2DBScannerComponent with IntegerComponent with BooleanComponent with HashMapComponent with SetComponent with TreeSetComponent with DefaultEntryComponent with ArrayBufferComponent with ManualLiftedLegoBase { self: DeepDSL => }