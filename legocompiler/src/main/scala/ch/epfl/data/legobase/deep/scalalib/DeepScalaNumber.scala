/* Generated by AutoLifter ? 2014 */

package ch.epfl.data
package legobase
package deep
package scalalib

import pardis.ir._
import pardis.ir.pardisTypeImplicits._

trait DoubleOps extends Base { this: DeepDSL =>
  implicit class DoubleRep(self: Rep[Double]) {
    def toByte: Rep[Byte] = doubleToByte(self)
    def toShort: Rep[Short] = doubleToShort(self)
    def toChar: Rep[Char] = doubleToChar(self)
    def toInt: Rep[Int] = doubleToInt(self)
    def toLong: Rep[Long] = doubleToLong(self)
    def toFloat: Rep[Float] = doubleToFloat(self)
    def toDouble: Rep[Double] = doubleToDouble(self)
    def unary_+ : Rep[Double] = doubleUnary_$plus(self)
    def unary_- : Rep[Double] = doubleUnary_$minus(self)
    def +(x: Rep[String])(implicit overload1: Overloaded1): Rep[String] = double$plus1(self, x)
    def ==(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$eq$eq1(self, x)
    def ==(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$eq$eq2(self, x)
    def ==(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$eq$eq3(self, x)
    def ==(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$eq$eq4(self, x)
    def ==(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$eq$eq5(self, x)
    def ==(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$eq$eq6(self, x)
    def ==(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$eq$eq7(self, x)
    def !=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$bang$eq1(self, x)
    def !=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$bang$eq2(self, x)
    def !=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$bang$eq3(self, x)
    def !=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$bang$eq4(self, x)
    def !=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$bang$eq5(self, x)
    def !=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$bang$eq6(self, x)
    def !=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$bang$eq7(self, x)
    def <(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$less1(self, x)
    def <(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$less2(self, x)
    def <(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$less3(self, x)
    def <(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$less4(self, x)
    def <(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$less5(self, x)
    def <(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$less6(self, x)
    def <(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$less7(self, x)
    def <=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$less$eq1(self, x)
    def <=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$less$eq2(self, x)
    def <=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$less$eq3(self, x)
    def <=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$less$eq4(self, x)
    def <=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$less$eq5(self, x)
    def <=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$less$eq6(self, x)
    def <=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$less$eq7(self, x)
    def >(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$greater1(self, x)
    def >(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$greater2(self, x)
    def >(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$greater3(self, x)
    def >(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$greater4(self, x)
    def >(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$greater5(self, x)
    def >(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$greater6(self, x)
    def >(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$greater7(self, x)
    def >=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = double$greater$eq1(self, x)
    def >=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = double$greater$eq2(self, x)
    def >=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = double$greater$eq3(self, x)
    def >=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = double$greater$eq4(self, x)
    def >=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = double$greater$eq5(self, x)
    def >=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = double$greater$eq6(self, x)
    def >=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = double$greater$eq7(self, x)
    def +(x: Rep[Byte])(implicit overload2: Overloaded2): Rep[Double] = double$plus2(self, x)
    def +(x: Rep[Short])(implicit overload3: Overloaded3): Rep[Double] = double$plus3(self, x)
    def +(x: Rep[Char])(implicit overload4: Overloaded4): Rep[Double] = double$plus4(self, x)
    def +(x: Rep[Int])(implicit overload5: Overloaded5): Rep[Double] = double$plus5(self, x)
    def +(x: Rep[Long])(implicit overload6: Overloaded6): Rep[Double] = double$plus6(self, x)
    def +(x: Rep[Float])(implicit overload7: Overloaded7): Rep[Double] = double$plus7(self, x)
    def +(x: Rep[Double])(implicit overload8: Overloaded8): Rep[Double] = double$plus8(self, x)
    def -(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Double] = double$minus1(self, x)
    def -(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Double] = double$minus2(self, x)
    def -(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Double] = double$minus3(self, x)
    def -(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Double] = double$minus4(self, x)
    def -(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Double] = double$minus5(self, x)
    def -(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Double] = double$minus6(self, x)
    def -(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = double$minus7(self, x)
    def *(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Double] = double$times1(self, x)
    def *(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Double] = double$times2(self, x)
    def *(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Double] = double$times3(self, x)
    def *(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Double] = double$times4(self, x)
    def *(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Double] = double$times5(self, x)
    def *(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Double] = double$times6(self, x)
    def *(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = double$times7(self, x)
    def /(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Double] = double$div1(self, x)
    def /(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Double] = double$div2(self, x)
    def /(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Double] = double$div3(self, x)
    def /(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Double] = double$div4(self, x)
    def /(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Double] = double$div5(self, x)
    def /(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Double] = double$div6(self, x)
    def /(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = double$div7(self, x)
    def %(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Double] = double$percent1(self, x)
    def %(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Double] = double$percent2(self, x)
    def %(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Double] = double$percent3(self, x)
    def %(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Double] = double$percent4(self, x)
    def %(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Double] = double$percent5(self, x)
    def %(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Double] = double$percent6(self, x)
    def %(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = double$percent7(self, x)
  }
  object Double {

  }
  // constructors

  // case classes
  case class DoubleToByte(self: Rep[Double]) extends FunctionDef[Byte](Some(self), "toByte", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToShort(self: Rep[Double]) extends FunctionDef[Short](Some(self), "toShort", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToChar(self: Rep[Double]) extends FunctionDef[Char](Some(self), "toChar", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToInt(self: Rep[Double]) extends FunctionDef[Int](Some(self), "toInt", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToLong(self: Rep[Double]) extends FunctionDef[Long](Some(self), "toLong", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToFloat(self: Rep[Double]) extends FunctionDef[Float](Some(self), "toFloat", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleToDouble(self: Rep[Double]) extends FunctionDef[Double](Some(self), "toDouble", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleUnary_$plus(self: Rep[Double]) extends FunctionDef[Double](Some(self), "unary_+", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class DoubleUnary_$minus(self: Rep[Double]) extends FunctionDef[Double](Some(self), "unary_-", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class Double$plus1(self: Rep[Double], x: Rep[String]) extends FunctionDef[String](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$eq$eq7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$bang$eq7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$less$eq7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$greater$eq7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus2(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus3(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus4(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus5(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus6(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus7(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$plus8(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$minus7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$times7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$div7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent1(self: Rep[Double], x: Rep[Byte]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent2(self: Rep[Double], x: Rep[Short]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent3(self: Rep[Double], x: Rep[Char]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent4(self: Rep[Double], x: Rep[Int]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent5(self: Rep[Double], x: Rep[Long]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent6(self: Rep[Double], x: Rep[Float]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Double$percent7(self: Rep[Double], x: Rep[Double]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  // method definitions
  def doubleToByte(self: Rep[Double]): Rep[Byte] = DoubleToByte(self)
  def doubleToShort(self: Rep[Double]): Rep[Short] = DoubleToShort(self)
  def doubleToChar(self: Rep[Double]): Rep[Char] = DoubleToChar(self)
  def doubleToInt(self: Rep[Double]): Rep[Int] = DoubleToInt(self)
  def doubleToLong(self: Rep[Double]): Rep[Long] = DoubleToLong(self)
  def doubleToFloat(self: Rep[Double]): Rep[Float] = DoubleToFloat(self)
  def doubleToDouble(self: Rep[Double]): Rep[Double] = DoubleToDouble(self)
  def doubleUnary_$plus(self: Rep[Double]): Rep[Double] = DoubleUnary_$plus(self)
  def doubleUnary_$minus(self: Rep[Double]): Rep[Double] = DoubleUnary_$minus(self)
  def double$plus1(self: Rep[Double], x: Rep[String]): Rep[String] = Double$plus1(self, x)
  def double$eq$eq1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$eq$eq1(self, x)
  def double$eq$eq2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$eq$eq2(self, x)
  def double$eq$eq3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$eq$eq3(self, x)
  def double$eq$eq4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$eq$eq4(self, x)
  def double$eq$eq5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$eq$eq5(self, x)
  def double$eq$eq6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$eq$eq6(self, x)
  def double$eq$eq7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$eq$eq7(self, x)
  def double$bang$eq1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$bang$eq1(self, x)
  def double$bang$eq2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$bang$eq2(self, x)
  def double$bang$eq3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$bang$eq3(self, x)
  def double$bang$eq4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$bang$eq4(self, x)
  def double$bang$eq5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$bang$eq5(self, x)
  def double$bang$eq6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$bang$eq6(self, x)
  def double$bang$eq7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$bang$eq7(self, x)
  def double$less1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$less1(self, x)
  def double$less2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$less2(self, x)
  def double$less3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$less3(self, x)
  def double$less4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$less4(self, x)
  def double$less5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$less5(self, x)
  def double$less6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$less6(self, x)
  def double$less7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$less7(self, x)
  def double$less$eq1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$less$eq1(self, x)
  def double$less$eq2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$less$eq2(self, x)
  def double$less$eq3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$less$eq3(self, x)
  def double$less$eq4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$less$eq4(self, x)
  def double$less$eq5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$less$eq5(self, x)
  def double$less$eq6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$less$eq6(self, x)
  def double$less$eq7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$less$eq7(self, x)
  def double$greater1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$greater1(self, x)
  def double$greater2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$greater2(self, x)
  def double$greater3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$greater3(self, x)
  def double$greater4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$greater4(self, x)
  def double$greater5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$greater5(self, x)
  def double$greater6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$greater6(self, x)
  def double$greater7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$greater7(self, x)
  def double$greater$eq1(self: Rep[Double], x: Rep[Byte]): Rep[Boolean] = Double$greater$eq1(self, x)
  def double$greater$eq2(self: Rep[Double], x: Rep[Short]): Rep[Boolean] = Double$greater$eq2(self, x)
  def double$greater$eq3(self: Rep[Double], x: Rep[Char]): Rep[Boolean] = Double$greater$eq3(self, x)
  def double$greater$eq4(self: Rep[Double], x: Rep[Int]): Rep[Boolean] = Double$greater$eq4(self, x)
  def double$greater$eq5(self: Rep[Double], x: Rep[Long]): Rep[Boolean] = Double$greater$eq5(self, x)
  def double$greater$eq6(self: Rep[Double], x: Rep[Float]): Rep[Boolean] = Double$greater$eq6(self, x)
  def double$greater$eq7(self: Rep[Double], x: Rep[Double]): Rep[Boolean] = Double$greater$eq7(self, x)
  def double$plus2(self: Rep[Double], x: Rep[Byte]): Rep[Double] = Double$plus2(self, x)
  def double$plus3(self: Rep[Double], x: Rep[Short]): Rep[Double] = Double$plus3(self, x)
  def double$plus4(self: Rep[Double], x: Rep[Char]): Rep[Double] = Double$plus4(self, x)
  def double$plus5(self: Rep[Double], x: Rep[Int]): Rep[Double] = Double$plus5(self, x)
  def double$plus6(self: Rep[Double], x: Rep[Long]): Rep[Double] = Double$plus6(self, x)
  def double$plus7(self: Rep[Double], x: Rep[Float]): Rep[Double] = Double$plus7(self, x)
  def double$plus8(self: Rep[Double], x: Rep[Double]): Rep[Double] = Double$plus8(self, x)
  def double$minus1(self: Rep[Double], x: Rep[Byte]): Rep[Double] = Double$minus1(self, x)
  def double$minus2(self: Rep[Double], x: Rep[Short]): Rep[Double] = Double$minus2(self, x)
  def double$minus3(self: Rep[Double], x: Rep[Char]): Rep[Double] = Double$minus3(self, x)
  def double$minus4(self: Rep[Double], x: Rep[Int]): Rep[Double] = Double$minus4(self, x)
  def double$minus5(self: Rep[Double], x: Rep[Long]): Rep[Double] = Double$minus5(self, x)
  def double$minus6(self: Rep[Double], x: Rep[Float]): Rep[Double] = Double$minus6(self, x)
  def double$minus7(self: Rep[Double], x: Rep[Double]): Rep[Double] = Double$minus7(self, x)
  def double$times1(self: Rep[Double], x: Rep[Byte]): Rep[Double] = Double$times1(self, x)
  def double$times2(self: Rep[Double], x: Rep[Short]): Rep[Double] = Double$times2(self, x)
  def double$times3(self: Rep[Double], x: Rep[Char]): Rep[Double] = Double$times3(self, x)
  def double$times4(self: Rep[Double], x: Rep[Int]): Rep[Double] = Double$times4(self, x)
  def double$times5(self: Rep[Double], x: Rep[Long]): Rep[Double] = Double$times5(self, x)
  def double$times6(self: Rep[Double], x: Rep[Float]): Rep[Double] = Double$times6(self, x)
  def double$times7(self: Rep[Double], x: Rep[Double]): Rep[Double] = Double$times7(self, x)
  def double$div1(self: Rep[Double], x: Rep[Byte]): Rep[Double] = Double$div1(self, x)
  def double$div2(self: Rep[Double], x: Rep[Short]): Rep[Double] = Double$div2(self, x)
  def double$div3(self: Rep[Double], x: Rep[Char]): Rep[Double] = Double$div3(self, x)
  def double$div4(self: Rep[Double], x: Rep[Int]): Rep[Double] = Double$div4(self, x)
  def double$div5(self: Rep[Double], x: Rep[Long]): Rep[Double] = Double$div5(self, x)
  def double$div6(self: Rep[Double], x: Rep[Float]): Rep[Double] = Double$div6(self, x)
  def double$div7(self: Rep[Double], x: Rep[Double]): Rep[Double] = Double$div7(self, x)
  def double$percent1(self: Rep[Double], x: Rep[Byte]): Rep[Double] = Double$percent1(self, x)
  def double$percent2(self: Rep[Double], x: Rep[Short]): Rep[Double] = Double$percent2(self, x)
  def double$percent3(self: Rep[Double], x: Rep[Char]): Rep[Double] = Double$percent3(self, x)
  def double$percent4(self: Rep[Double], x: Rep[Int]): Rep[Double] = Double$percent4(self, x)
  def double$percent5(self: Rep[Double], x: Rep[Long]): Rep[Double] = Double$percent5(self, x)
  def double$percent6(self: Rep[Double], x: Rep[Float]): Rep[Double] = Double$percent6(self, x)
  def double$percent7(self: Rep[Double], x: Rep[Double]): Rep[Double] = Double$percent7(self, x)
  type Double = scala.Double
  val DoubleType = ch.epfl.data.pardis.ir.DoubleType
  implicit val typeDouble = DoubleType
}
trait DoubleImplicits { this: DoubleComponent =>
  // Add implicit conversions here!
}
trait DoubleImplementations { self: DeepDSL =>

}
trait DoubleComponent extends DoubleOps with DoubleImplicits { self: DeepDSL => }

trait CharacterOps extends Base { this: DeepDSL =>
  implicit class CharacterRep(self: Rep[Character]) {
    def equals(x$1: Rep[Any]): Rep[Boolean] = characterEquals(self, x$1)
    def compareTo(x$1: Rep[Character]): Rep[Int] = characterCompareTo(self, x$1)
    def charValue(): Rep[Char] = characterCharValue(self)
    def value: Rep[Char] = character_Field_Value(self)
  }
  object Character {

  }
  // constructors

  // case classes
  case class CharacterEquals(self: Rep[Character], x$1: Rep[Any]) extends FunctionDef[Boolean](Some(self), "equals", List(List(x$1))) {
    override def curriedConstructor = (copy _).curried
  }

  case class CharacterCompareTo(self: Rep[Character], x$1: Rep[Character]) extends FunctionDef[Int](Some(self), "compareTo", List(List(x$1))) {
    override def curriedConstructor = (copy _).curried
  }

  case class CharacterCharValue(self: Rep[Character]) extends FunctionDef[Char](Some(self), "charValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class Character_Field_Value(self: Rep[Character]) extends FieldDef[Char](self, "value") {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  // method definitions
  def characterEquals(self: Rep[Character], x$1: Rep[Any]): Rep[Boolean] = CharacterEquals(self, x$1)
  def characterCompareTo(self: Rep[Character], x$1: Rep[Character]): Rep[Int] = CharacterCompareTo(self, x$1)
  def characterCharValue(self: Rep[Character]): Rep[Char] = CharacterCharValue(self)
  def character_Field_Value(self: Rep[Character]): Rep[Char] = Character_Field_Value(self)
  type Character = java.lang.Character
  case object CharacterType extends TypeRep[Character] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = CharacterType
    val name = "Character"
    val typeArguments = Nil

    val typeTag = scala.reflect.runtime.universe.typeTag[Character]
  }
  implicit val typeCharacter = CharacterType
}
trait CharacterImplicits { this: CharacterComponent =>
  // Add implicit conversions here!
}
trait CharacterImplementations { self: DeepDSL =>

}
trait CharacterComponent extends CharacterOps with CharacterImplicits { self: DeepDSL => }

trait LongOps extends Base { this: DeepDSL =>
  implicit class LongRep(self: Rep[Long]) {
    def toByte: Rep[Byte] = longToByte(self)
    def toShort: Rep[Short] = longToShort(self)
    def toChar: Rep[Char] = longToChar(self)
    def toInt: Rep[Int] = longToInt(self)
    def toLong: Rep[Long] = longToLong(self)
    def toFloat: Rep[Float] = longToFloat(self)
    def toDouble: Rep[Double] = longToDouble(self)
    def unary_~ : Rep[Long] = longUnary_$tilde(self)
    def unary_+ : Rep[Long] = longUnary_$plus(self)
    def unary_- : Rep[Long] = longUnary_$minus(self)
    def +(x: Rep[String])(implicit overload1: Overloaded1): Rep[String] = long$plus1(self, x)
    def <<(x: Rep[Int])(implicit overload1: Overloaded1): Rep[Long] = long$less$less1(self, x)
    def <<(x: Rep[Long])(implicit overload2: Overloaded2): Rep[Long] = long$less$less2(self, x)
    def >>>(x: Rep[Int])(implicit overload1: Overloaded1): Rep[Long] = long$greater$greater$greater1(self, x)
    def >>>(x: Rep[Long])(implicit overload2: Overloaded2): Rep[Long] = long$greater$greater$greater2(self, x)
    def >>(x: Rep[Int])(implicit overload1: Overloaded1): Rep[Long] = long$greater$greater1(self, x)
    def >>(x: Rep[Long])(implicit overload2: Overloaded2): Rep[Long] = long$greater$greater2(self, x)
    def ==(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$eq$eq1(self, x)
    def ==(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$eq$eq2(self, x)
    def ==(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$eq$eq3(self, x)
    def ==(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$eq$eq4(self, x)
    def ==(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$eq$eq5(self, x)
    def ==(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$eq$eq6(self, x)
    def ==(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$eq$eq7(self, x)
    def !=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$bang$eq1(self, x)
    def !=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$bang$eq2(self, x)
    def !=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$bang$eq3(self, x)
    def !=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$bang$eq4(self, x)
    def !=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$bang$eq5(self, x)
    def !=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$bang$eq6(self, x)
    def !=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$bang$eq7(self, x)
    def <(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$less1(self, x)
    def <(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$less2(self, x)
    def <(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$less3(self, x)
    def <(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$less4(self, x)
    def <(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$less5(self, x)
    def <(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$less6(self, x)
    def <(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$less7(self, x)
    def <=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$less$eq1(self, x)
    def <=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$less$eq2(self, x)
    def <=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$less$eq3(self, x)
    def <=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$less$eq4(self, x)
    def <=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$less$eq5(self, x)
    def <=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$less$eq6(self, x)
    def <=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$less$eq7(self, x)
    def >(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$greater1(self, x)
    def >(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$greater2(self, x)
    def >(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$greater3(self, x)
    def >(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$greater4(self, x)
    def >(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$greater5(self, x)
    def >(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$greater6(self, x)
    def >(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$greater7(self, x)
    def >=(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Boolean] = long$greater$eq1(self, x)
    def >=(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Boolean] = long$greater$eq2(self, x)
    def >=(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Boolean] = long$greater$eq3(self, x)
    def >=(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Boolean] = long$greater$eq4(self, x)
    def >=(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Boolean] = long$greater$eq5(self, x)
    def >=(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Boolean] = long$greater$eq6(self, x)
    def >=(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Boolean] = long$greater$eq7(self, x)
    def |(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$bar1(self, x)
    def |(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$bar2(self, x)
    def |(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$bar3(self, x)
    def |(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$bar4(self, x)
    def |(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$bar5(self, x)
    def &(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$amp1(self, x)
    def &(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$amp2(self, x)
    def &(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$amp3(self, x)
    def &(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$amp4(self, x)
    def &(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$amp5(self, x)
    def ^(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$up1(self, x)
    def ^(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$up2(self, x)
    def ^(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$up3(self, x)
    def ^(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$up4(self, x)
    def ^(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$up5(self, x)
    def +(x: Rep[Byte])(implicit overload2: Overloaded2): Rep[Long] = long$plus2(self, x)
    def +(x: Rep[Short])(implicit overload3: Overloaded3): Rep[Long] = long$plus3(self, x)
    def +(x: Rep[Char])(implicit overload4: Overloaded4): Rep[Long] = long$plus4(self, x)
    def +(x: Rep[Int])(implicit overload5: Overloaded5): Rep[Long] = long$plus5(self, x)
    def +(x: Rep[Long])(implicit overload6: Overloaded6): Rep[Long] = long$plus6(self, x)
    def +(x: Rep[Float])(implicit overload7: Overloaded7): Rep[Float] = long$plus7(self, x)
    def +(x: Rep[Double])(implicit overload8: Overloaded8): Rep[Double] = long$plus8(self, x)
    def -(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$minus1(self, x)
    def -(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$minus2(self, x)
    def -(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$minus3(self, x)
    def -(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$minus4(self, x)
    def -(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$minus5(self, x)
    def -(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Float] = long$minus6(self, x)
    def -(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = long$minus7(self, x)
    def *(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$times1(self, x)
    def *(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$times2(self, x)
    def *(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$times3(self, x)
    def *(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$times4(self, x)
    def *(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$times5(self, x)
    def *(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Float] = long$times6(self, x)
    def *(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = long$times7(self, x)
    def /(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$div1(self, x)
    def /(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$div2(self, x)
    def /(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$div3(self, x)
    def /(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$div4(self, x)
    def /(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$div5(self, x)
    def /(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Float] = long$div6(self, x)
    def /(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = long$div7(self, x)
    def %(x: Rep[Byte])(implicit overload1: Overloaded1): Rep[Long] = long$percent1(self, x)
    def %(x: Rep[Short])(implicit overload2: Overloaded2): Rep[Long] = long$percent2(self, x)
    def %(x: Rep[Char])(implicit overload3: Overloaded3): Rep[Long] = long$percent3(self, x)
    def %(x: Rep[Int])(implicit overload4: Overloaded4): Rep[Long] = long$percent4(self, x)
    def %(x: Rep[Long])(implicit overload5: Overloaded5): Rep[Long] = long$percent5(self, x)
    def %(x: Rep[Float])(implicit overload6: Overloaded6): Rep[Float] = long$percent6(self, x)
    def %(x: Rep[Double])(implicit overload7: Overloaded7): Rep[Double] = long$percent7(self, x)
  }
  object Long {

  }
  // constructors

  // case classes
  case class LongToByte(self: Rep[Long]) extends FunctionDef[Byte](Some(self), "toByte", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToShort(self: Rep[Long]) extends FunctionDef[Short](Some(self), "toShort", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToChar(self: Rep[Long]) extends FunctionDef[Char](Some(self), "toChar", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToInt(self: Rep[Long]) extends FunctionDef[Int](Some(self), "toInt", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToLong(self: Rep[Long]) extends FunctionDef[Long](Some(self), "toLong", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToFloat(self: Rep[Long]) extends FunctionDef[Float](Some(self), "toFloat", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongToDouble(self: Rep[Long]) extends FunctionDef[Double](Some(self), "toDouble", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongUnary_$tilde(self: Rep[Long]) extends FunctionDef[Long](Some(self), "unary_~", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongUnary_$plus(self: Rep[Long]) extends FunctionDef[Long](Some(self), "unary_+", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class LongUnary_$minus(self: Rep[Long]) extends FunctionDef[Long](Some(self), "unary_-", List()) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class Long$plus1(self: Rep[Long], x: Rep[String]) extends FunctionDef[String](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$less1(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "<<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$less2(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "<<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$greater$greater1(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), ">>>", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$greater$greater2(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), ">>>", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$greater1(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), ">>", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$greater2(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), ">>", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$eq$eq7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "==", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bang$eq7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "!=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "<", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$less$eq7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), "<=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), ">", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$greater$eq7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Boolean](Some(self), ">=", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bar1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "|", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bar2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "|", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bar3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "|", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bar4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "|", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$bar5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "|", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$amp1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "&", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$amp2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "&", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$amp3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "&", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$amp4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "&", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$amp5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "&", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$up1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "^", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$up2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "^", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$up3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "^", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$up4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "^", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$up5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "^", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus2(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus3(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus4(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus5(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus6(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus7(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Float](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$plus8(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Double](Some(self), "+", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Float](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$minus7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Double](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Float](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$times7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Double](Some(self), "*", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Float](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$div7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Double](Some(self), "/", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent1(self: Rep[Long], x: Rep[Byte]) extends FunctionDef[Long](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent2(self: Rep[Long], x: Rep[Short]) extends FunctionDef[Long](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent3(self: Rep[Long], x: Rep[Char]) extends FunctionDef[Long](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent4(self: Rep[Long], x: Rep[Int]) extends FunctionDef[Long](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent5(self: Rep[Long], x: Rep[Long]) extends FunctionDef[Long](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent6(self: Rep[Long], x: Rep[Float]) extends FunctionDef[Float](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Long$percent7(self: Rep[Long], x: Rep[Double]) extends FunctionDef[Double](Some(self), "%", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  // method definitions
  def longToByte(self: Rep[Long]): Rep[Byte] = LongToByte(self)
  def longToShort(self: Rep[Long]): Rep[Short] = LongToShort(self)
  def longToChar(self: Rep[Long]): Rep[Char] = LongToChar(self)
  def longToInt(self: Rep[Long]): Rep[Int] = LongToInt(self)
  def longToLong(self: Rep[Long]): Rep[Long] = LongToLong(self)
  def longToFloat(self: Rep[Long]): Rep[Float] = LongToFloat(self)
  def longToDouble(self: Rep[Long]): Rep[Double] = LongToDouble(self)
  def longUnary_$tilde(self: Rep[Long]): Rep[Long] = LongUnary_$tilde(self)
  def longUnary_$plus(self: Rep[Long]): Rep[Long] = LongUnary_$plus(self)
  def longUnary_$minus(self: Rep[Long]): Rep[Long] = LongUnary_$minus(self)
  def long$plus1(self: Rep[Long], x: Rep[String]): Rep[String] = Long$plus1(self, x)
  def long$less$less1(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$less$less1(self, x)
  def long$less$less2(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$less$less2(self, x)
  def long$greater$greater$greater1(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$greater$greater$greater1(self, x)
  def long$greater$greater$greater2(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$greater$greater$greater2(self, x)
  def long$greater$greater1(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$greater$greater1(self, x)
  def long$greater$greater2(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$greater$greater2(self, x)
  def long$eq$eq1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$eq$eq1(self, x)
  def long$eq$eq2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$eq$eq2(self, x)
  def long$eq$eq3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$eq$eq3(self, x)
  def long$eq$eq4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$eq$eq4(self, x)
  def long$eq$eq5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$eq$eq5(self, x)
  def long$eq$eq6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$eq$eq6(self, x)
  def long$eq$eq7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$eq$eq7(self, x)
  def long$bang$eq1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$bang$eq1(self, x)
  def long$bang$eq2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$bang$eq2(self, x)
  def long$bang$eq3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$bang$eq3(self, x)
  def long$bang$eq4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$bang$eq4(self, x)
  def long$bang$eq5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$bang$eq5(self, x)
  def long$bang$eq6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$bang$eq6(self, x)
  def long$bang$eq7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$bang$eq7(self, x)
  def long$less1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$less1(self, x)
  def long$less2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$less2(self, x)
  def long$less3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$less3(self, x)
  def long$less4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$less4(self, x)
  def long$less5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$less5(self, x)
  def long$less6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$less6(self, x)
  def long$less7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$less7(self, x)
  def long$less$eq1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$less$eq1(self, x)
  def long$less$eq2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$less$eq2(self, x)
  def long$less$eq3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$less$eq3(self, x)
  def long$less$eq4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$less$eq4(self, x)
  def long$less$eq5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$less$eq5(self, x)
  def long$less$eq6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$less$eq6(self, x)
  def long$less$eq7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$less$eq7(self, x)
  def long$greater1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$greater1(self, x)
  def long$greater2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$greater2(self, x)
  def long$greater3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$greater3(self, x)
  def long$greater4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$greater4(self, x)
  def long$greater5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$greater5(self, x)
  def long$greater6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$greater6(self, x)
  def long$greater7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$greater7(self, x)
  def long$greater$eq1(self: Rep[Long], x: Rep[Byte]): Rep[Boolean] = Long$greater$eq1(self, x)
  def long$greater$eq2(self: Rep[Long], x: Rep[Short]): Rep[Boolean] = Long$greater$eq2(self, x)
  def long$greater$eq3(self: Rep[Long], x: Rep[Char]): Rep[Boolean] = Long$greater$eq3(self, x)
  def long$greater$eq4(self: Rep[Long], x: Rep[Int]): Rep[Boolean] = Long$greater$eq4(self, x)
  def long$greater$eq5(self: Rep[Long], x: Rep[Long]): Rep[Boolean] = Long$greater$eq5(self, x)
  def long$greater$eq6(self: Rep[Long], x: Rep[Float]): Rep[Boolean] = Long$greater$eq6(self, x)
  def long$greater$eq7(self: Rep[Long], x: Rep[Double]): Rep[Boolean] = Long$greater$eq7(self, x)
  def long$bar1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$bar1(self, x)
  def long$bar2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$bar2(self, x)
  def long$bar3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$bar3(self, x)
  def long$bar4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$bar4(self, x)
  def long$bar5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$bar5(self, x)
  def long$amp1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$amp1(self, x)
  def long$amp2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$amp2(self, x)
  def long$amp3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$amp3(self, x)
  def long$amp4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$amp4(self, x)
  def long$amp5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$amp5(self, x)
  def long$up1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$up1(self, x)
  def long$up2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$up2(self, x)
  def long$up3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$up3(self, x)
  def long$up4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$up4(self, x)
  def long$up5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$up5(self, x)
  def long$plus2(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$plus2(self, x)
  def long$plus3(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$plus3(self, x)
  def long$plus4(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$plus4(self, x)
  def long$plus5(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$plus5(self, x)
  def long$plus6(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$plus6(self, x)
  def long$plus7(self: Rep[Long], x: Rep[Float]): Rep[Float] = Long$plus7(self, x)
  def long$plus8(self: Rep[Long], x: Rep[Double]): Rep[Double] = Long$plus8(self, x)
  def long$minus1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$minus1(self, x)
  def long$minus2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$minus2(self, x)
  def long$minus3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$minus3(self, x)
  def long$minus4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$minus4(self, x)
  def long$minus5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$minus5(self, x)
  def long$minus6(self: Rep[Long], x: Rep[Float]): Rep[Float] = Long$minus6(self, x)
  def long$minus7(self: Rep[Long], x: Rep[Double]): Rep[Double] = Long$minus7(self, x)
  def long$times1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$times1(self, x)
  def long$times2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$times2(self, x)
  def long$times3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$times3(self, x)
  def long$times4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$times4(self, x)
  def long$times5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$times5(self, x)
  def long$times6(self: Rep[Long], x: Rep[Float]): Rep[Float] = Long$times6(self, x)
  def long$times7(self: Rep[Long], x: Rep[Double]): Rep[Double] = Long$times7(self, x)
  def long$div1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$div1(self, x)
  def long$div2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$div2(self, x)
  def long$div3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$div3(self, x)
  def long$div4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$div4(self, x)
  def long$div5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$div5(self, x)
  def long$div6(self: Rep[Long], x: Rep[Float]): Rep[Float] = Long$div6(self, x)
  def long$div7(self: Rep[Long], x: Rep[Double]): Rep[Double] = Long$div7(self, x)
  def long$percent1(self: Rep[Long], x: Rep[Byte]): Rep[Long] = Long$percent1(self, x)
  def long$percent2(self: Rep[Long], x: Rep[Short]): Rep[Long] = Long$percent2(self, x)
  def long$percent3(self: Rep[Long], x: Rep[Char]): Rep[Long] = Long$percent3(self, x)
  def long$percent4(self: Rep[Long], x: Rep[Int]): Rep[Long] = Long$percent4(self, x)
  def long$percent5(self: Rep[Long], x: Rep[Long]): Rep[Long] = Long$percent5(self, x)
  def long$percent6(self: Rep[Long], x: Rep[Float]): Rep[Float] = Long$percent6(self, x)
  def long$percent7(self: Rep[Long], x: Rep[Double]): Rep[Double] = Long$percent7(self, x)
  type Long = scala.Long
  val LongType = ch.epfl.data.pardis.ir.LongType
  implicit val typeLong = LongType
}
trait LongImplicits { this: LongComponent =>
  // Add implicit conversions here!
}
trait LongImplementations { self: DeepDSL =>

}
trait LongComponent extends LongOps with LongImplicits { self: DeepDSL => }

trait IntegerOps extends Base { this: DeepDSL =>
  implicit class IntegerRep(self: Rep[Integer]) {
    def equals(x$1: Rep[Any]): Rep[Boolean] = integerEquals(self, x$1)
    def compareTo(x$1: Rep[Integer]): Rep[Int] = integerCompareTo(self, x$1)
    def byteValue(): Rep[Byte] = integerByteValue(self)
    def shortValue(): Rep[Short] = integerShortValue(self)
    def intValue(): Rep[Int] = integerIntValue(self)
    def longValue(): Rep[Long] = integerLongValue(self)
    def floatValue(): Rep[Float] = integerFloatValue(self)
    def doubleValue(): Rep[Double] = integerDoubleValue(self)
    def value: Rep[Int] = integer_Field_Value(self)
  }
  object Integer {

  }
  // constructors

  // case classes
  case class IntegerEquals(self: Rep[Integer], x$1: Rep[Any]) extends FunctionDef[Boolean](Some(self), "equals", List(List(x$1))) {
    override def curriedConstructor = (copy _).curried
  }

  case class IntegerCompareTo(self: Rep[Integer], x$1: Rep[Integer]) extends FunctionDef[Int](Some(self), "compareTo", List(List(x$1))) {
    override def curriedConstructor = (copy _).curried
  }

  case class IntegerByteValue(self: Rep[Integer]) extends FunctionDef[Byte](Some(self), "byteValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class IntegerShortValue(self: Rep[Integer]) extends FunctionDef[Short](Some(self), "shortValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class IntegerIntValue(self: Rep[Integer]) extends FunctionDef[Int](Some(self), "intValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class IntegerLongValue(self: Rep[Integer]) extends FunctionDef[Long](Some(self), "longValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class IntegerFloatValue(self: Rep[Integer]) extends FunctionDef[Float](Some(self), "floatValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class IntegerDoubleValue(self: Rep[Integer]) extends FunctionDef[Double](Some(self), "doubleValue", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class Integer_Field_Value(self: Rep[Integer]) extends FieldDef[Int](self, "value") {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  // method definitions
  def integerEquals(self: Rep[Integer], x$1: Rep[Any]): Rep[Boolean] = IntegerEquals(self, x$1)
  def integerCompareTo(self: Rep[Integer], x$1: Rep[Integer]): Rep[Int] = IntegerCompareTo(self, x$1)
  def integerByteValue(self: Rep[Integer]): Rep[Byte] = IntegerByteValue(self)
  def integerShortValue(self: Rep[Integer]): Rep[Short] = IntegerShortValue(self)
  def integerIntValue(self: Rep[Integer]): Rep[Int] = IntegerIntValue(self)
  def integerLongValue(self: Rep[Integer]): Rep[Long] = IntegerLongValue(self)
  def integerFloatValue(self: Rep[Integer]): Rep[Float] = IntegerFloatValue(self)
  def integerDoubleValue(self: Rep[Integer]): Rep[Double] = IntegerDoubleValue(self)
  def integer_Field_Value(self: Rep[Integer]): Rep[Int] = Integer_Field_Value(self)
  type Integer = java.lang.Integer
  case object IntegerType extends TypeRep[Integer] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = IntegerType
    val name = "Integer"
    val typeArguments = Nil

    val typeTag = scala.reflect.runtime.universe.typeTag[Integer]
  }
  implicit val typeInteger = IntegerType
}
trait IntegerImplicits { this: IntegerComponent =>
  // Add implicit conversions here!
}
trait IntegerImplementations { self: DeepDSL =>

}
trait IntegerComponent extends IntegerOps with IntegerImplicits { self: DeepDSL => }

trait ByteOps extends Base { this: DeepDSL =>
  implicit class ByteRep(self: Rep[Byte]) {
    def -(x: Rep[Byte]): Rep[Int] = byte$minus(self, x)
  }
  object Byte {

  }
  // constructors

  // case classes
  case class Byte$minus(self: Rep[Byte], x: Rep[Byte]) extends FunctionDef[Int](Some(self), "-", List(List(x))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  // method definitions
  def byte$minus(self: Rep[Byte], x: Rep[Byte]): Rep[Int] = Byte$minus(self, x)
  type Byte = scala.Byte
  val ByteType = ch.epfl.data.pardis.ir.ByteType
  implicit val typeByte = ByteType
}
trait ByteImplicits { this: ByteComponent =>
  // Add implicit conversions here!
}
trait ByteImplementations { self: DeepDSL =>

}
trait ByteComponent extends ByteOps with ByteImplicits { self: DeepDSL => }

